
var aGlobal: u64;

fun Test0() {}
fun Test1(a1: i32) {}
fun Test2(a1: i32): i32 { return 0; }
fun Test3(a1: i32): i32 { return 5 + a1; }
fun Test4(a1: i32): i32 {
	locVar := a1;
	return locVar;
}
fun Test051(): bool { return 1 || 2; }
fun Test052(): bool { return 1 && 2; }
fun Test053(): bool { return true ? 1 : 2; }
fun Test054(): bool { return (true ? 1 : 2) || 2; }
fun Test055(): bool { return (true ? 1 : 2) && 2; }
fun Test056(): bool { return (true ? 1 : 2) || (true ? 1 : 2); }
fun Test057(): bool { return (true ? 1 : 2) && (true ? 1 : 2); }
fun Test5(hello: i32): i32 {
	test := hello - 1;
	if (test == -1) {
		return 3;
	} else if (test == 0) {
		return 4;
	}
	return 8;
}
fun Test51(hello: i32): i32 {
	if (hello >= 20 && hello <= 30) {
		return hello - 1;
	} else {
		return hello + 1;
	}
}
fun Test52(hello: i32): i32 {
	hey := hello;
	hey = 10;
	return hey;
}
fun Test53(hello: i32): i32 {
	test2 := 90;
	switch (hello) {
		case 1: test2 = 80;
	}
	return test2;
}
fun Test54(hello: i32): i32 {
	test2 := 90;
	switch (hello) {
		case 1: test2 = 80;
		default: test2 = 70;
	}
	return test2;
}
fun Test6(hello: i32): i32 {
	test2 := 90;
	switch (hello) {
		case 1: test2 = 22;
		case 2: test2 = 77;
		case 3 ... 10: test2 = 90;
		default: test2 = 58;
	}
	return test2 * 1;
}
fun Test7(hello: i32): i32 {
	final := hello;
	{
		t0 := 1 + hello * 2;
		t0ptr := &t0;
		t0val := *t0ptr;
		final = t0val;
	}
	return -final;
}
fun Test8(): i32 {
	return 8 / 2 * (2 + 2);
}

fun Test81(): i8 {
	return 8 / 2 * (2 + 2);
}

fun Print(fmt: i8*, ...): i32;

struct TestStruct {
	first: i32;
	second: i32;
	third: f32;
}

struct Awesome {
	self: Awesome*;
}

fun Test9(): f32 {
	aaa := TestStruct {
		third = 74.0,
	};
	return aaa.third;
}

fun Test10() : f32 {
	final :f32= 0.0;
	i: u8 = 0;
	for (; i < 20; i = i + 1) {
		final = final + (cast(f32) i * cast(f32) 10.0);
	}
	return final;
}

fun Test11() : i64 {
	i := 0;
	while (i < 10) {
		i = i + 1;
	}
	return i;
}

fun Test12() : i64 {
	i := 0;
	do {
		i = i + 1;
	} while (i < 10);
	return i;
}

fun Test13(): bool {
	return 1 && 2 && 3;
}

fun Test14(): bool {
	return 1 || 2 || 3;
}

fun Test15(): i32 {
	hello := 333;

	if (true) {
		hello = 12;
		if (false) {
			return 92;
		}
	} else if (1 || 2) {
		hello = 34;
	}

	hello = 33;
	return hello;

}

fun Test16(): i32 {
	return false ? 1 : true ? 2 : 3;
}

struct Test17Struct {
	aaa: i32[2];
}

fun Test17(): i32 {
	qqq: Test17Struct[2];
	qqq[0].aaa[1] = 1992;
	return qqq[0].aaa[1];
}

fun Test18(): i32 {
	qq: i32[3][4];
	qq[1][2] = 9292;
	return qq[1][2];
}

fun MuClampReal(x: f64, a: f64, b: f64): f64 {
    if (x < a) { return a; }
    if (x > b) { return b; }
    return a;
}

const MU_HASH_INITIAL = 2166136261;

alias MuId = u32;

fun MuHash(hash: MuId*, data: void*, size: i32) {
    ptr := cast(u8*) data;
    for (;size > 0;) {
        *hash = (*hash ^ *ptr) * 16777619;
        ptr += 1;
        size -= 1;
    }
}

fun MuGetId(data: void*, size: i32): MuId {
    res := cast(u32) MU_HASH_INITIAL;
    MuHash(cast(MuId*) &res, data, size);
    return res;
}

fun Crash(data: void*): u8 {
	return *cast(u8*) data;
}

fun Main(argc: i32, argv: i8**): i32 {
	return main(argc, argv);
}
fun StrLength(str: i8*): usize;

fun Test19(awesome: Awesome*): Awesome* {
	xxx := awesome.self;
	return xxx.self;
}

fun add(a: i32, b: i32): i32 {
	return a + b;
}

fun main(argc: i32, argv: i8**): i32 {
	hello: i32;

	if (true) hello = 1;

	aaa := TestStruct {
		first = 383,
		third = 74.0,
	};
	ptrToA := &aaa;
	bbb: f64[6] = {
		[2] = 333.4,
	};
	qqqq := &TestStruct{};
	funcProxy := Test9;
	ccc := funcProxy();

	nextA := ptrToA + 1;

	awesome := Awesome{};
	aaa.third = 80.0;
	ptrToA.second = 442;

    awesome.self += 10;
    offset := &(cast(TestStruct *)0).third;
	Print("Offset is %d\n", offset);

	troll: u8 = 0xAA;
	trol2 := Crash(&troll);

	string := "Testing";
	Print("s1: '%s' len: %d s2: '%s'\n", string, StrLength(string), string);

	Print("Orig = 0x%X Crash = 0x%X Are they equal? %d\n", troll, trol2, troll == trol2);

	bbb[3] = 33.6894;

	zzz := MuGetId("deez nuts", 9);
	Print("zzz = %x\n", zzz);
	Print("test lol\n");
	Print("TestStruct.first = %d\n", aaa.first);
	Print("TestStruct.second = %d\n", aaa.second);
	Print("bbb[2] = %g\n", bbb[2]);
	Print("bbb[3] = %g\n", bbb[3]);
	Print("ccc = %f\n", ccc);
	Print("aGlobal = %d\n", aGlobal);
	Print("hello = %d\n", hello);
	Print("them = %p\n", qqqq);
	Print("ptrToA = %p\n", ptrToA);
	Print("nextA = %p\n", nextA);
	Print("10+20 = %d\n", 10);
    return 1;
}