
enum TokenKind {
	TOKEN_NONE;
    TOKEN_EOF;
    TOKEN_IDENTIFIER;
    TOKEN_NUMBER;
    TOKEN_STRING;
    TOKEN_CHAR;

    TOKEN_PLUS;
    TOKEN_MINUS;
    TOKEN_STAR;
    TOKEN_SLASH;
    TOKEN_PERCENT;
    TOKEN_AMPERSAND;
    TOKEN_PIPE;
    TOKEN_CARET;
    TOKEN_TILDE;
    TOKEN_EQUAL;
    TOKEN_EXCLAMATION;
    TOKEN_COLON;
    TOKEN_LESS;
    TOKEN_GREATER;
    TOKEN_DOT;
    TOKEN_COMMA;
    TOKEN_QUESTION;
    TOKEN_OPEN_PAREN;
    TOKEN_CLOSE_PAREN;
    TOKEN_OPEN_BRACKET;
    TOKEN_CLOSE_BRACKET;
    TOKEN_OPEN_BRACE;
    TOKEN_CLOSE_BRACE;
    TOKEN_HASH;
    TOKEN_DOLLAR;
    TOKEN_AT;
    TOKEN_AMPERSAND_AMPERSAND;
    TOKEN_PIPE_PIPE;
    TOKEN_LEFT_SHIFT;
    TOKEN_RIGHT_SHIFT;
    TOKEN_SEMICOLON;
    TOKEN_DOT_DOT;

    TOKEN_PLUS_EQUAL;
    TOKEN_MINUS_EQUAL;
    TOKEN_STAR_EQUAL;
    TOKEN_SLASH_EQUAL;
    TOKEN_PERCENT_EQUAL;
    TOKEN_AMPERSAND_EQUAL;
    TOKEN_PIPE_EQUAL;
    TOKEN_CARET_EQUAL;
    TOKEN_TILDE_EQUAL;
    TOKEN_AMPERSAND_AMPERSAND_EQUAL;
    TOKEN_PIPE_PIPE_EQUAL;
    TOKEN_LEFT_SHIFT_EQUAL;
    TOKEN_RIGHT_SHIFT_EQUAL;

    TOKEN_EQUAL_EQUAL;
    TOKEN_EXCLAMATION_EQUAL;
    TOKEN_COLON_EQUAL;
    TOKEN_LESS_EQUAL;
    TOKEN_GREATER_EQUAL;

    TOKEN_KEYWORD_ALIAS;
    TOKEN_KEYWORD_ALIGNOF;
    TOKEN_KEYWORD_BREAK;
    TOKEN_KEYWORD_CASE;
    TOKEN_KEYWORD_CAST;
    TOKEN_KEYWORD_CONST;
    TOKEN_KEYWORD_CONTINUE;
    TOKEN_KEYWORD_DEFAULT;
    TOKEN_KEYWORD_DO;
    TOKEN_KEYWORD_ELSE;
    TOKEN_KEYWORD_ENUM;
    TOKEN_KEYWORD_FOR;
    TOKEN_KEYWORD_FUN;
    TOKEN_KEYWORD_IF;
    TOKEN_KEYWORD_OFFSETOF;
    TOKEN_KEYWORD_RETURN;
    TOKEN_KEYWORD_SIZEOF;
    TOKEN_KEYWORD_STRUCT;
    TOKEN_KEYWORD_SWITCH;
    TOKEN_KEYWORD_UNION;
    TOKEN_KEYWORD_VAR;
    TOKEN_KEYWORD_WHILE;
}

enum TokenModifier {
	TOKEN_MODIFIER_NONE        = 0 << 0;
	TOKEN_MODIFIER_HEXIDECIMAL = 1 << 0;
	TOKEN_MODIFIER_OCTAL       = 1 << 1;
	TOKEN_MODIFIER_BINARY      = 1 << 2;
	TOKEN_MODIFIER_32BIT_FLOAT = 1 << 3; 
}

struct Token {
	kind     : TokenKind;
	modifiers: TokenModifier;
	// location : Location;
	data: string;
}

fun LexerRun(filename: string, buffer: u8[]): Token[] {
	tokens: Token[];

	a := Token{};

	return tokens;
}